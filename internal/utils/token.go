package utils

import (
	"errors"
	"log"
	"time"

	"github.com/dgrijalva/jwt-go"
)


var ErrInvalidToken = errors.New("invalid token")

// VerifyToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç JWT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç claims, –µ—Å–ª–∏ –≤—Å—ë –æ–∫
func VerifyToken(tokenString string) (jwt.MapClaims, error) {
	log.Printf("üß™ –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: %s", tokenString)

	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			log.Println("‚õî –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏")
			return nil, ErrInvalidToken
		}
		return SecretKey, nil
	})

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞: %v", err)
		return nil, err
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok || !token.Valid {
		log.Println("‚õî –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç MapClaims")
		return nil, ErrInvalidToken
	}

	// –í—ã–≤–æ–¥–∏–º –≤—Å–µ claims
	log.Printf("üì• –ü–æ–ª—É—á–µ–Ω—ã claims: %+v", claims)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
	if exp, ok := claims["exp"].(float64); ok {
		expTime := time.Unix(int64(exp), 0)
		if time.Now().After(expTime) {
			log.Printf("‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫: %v (exp=%v)", expTime, exp)
			return nil, errors.New("token expired")
		}
	} else {
		log.Println("‚ö†Ô∏è –í —Ç–æ–∫–µ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ exp")
		return nil, errors.New("token has no exp")
	}

	log.Println("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
	return claims, nil
}
