
package controllers

import (
    "github.com/gofiber/fiber/v2"
    "go_back/internal/models"
    "go_back/internal/initializers"
	"github.com/google/uuid"
    "log"

	
)

func SendFriendRequest(c *fiber.Ctx) error {
    type Request struct {
		From       uuid.UUID `json:"from"`       
		ToUsername string    `json:"toUsername"` 
	}
	
	

    var body Request
    if err := c.BodyParser(&body); err != nil {
        return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"})
    }

    var toUser models.User
    if err := initializers.DB.Where("username = ?", body.ToUsername).First(&toUser).Error; err != nil {
        return c.Status(404).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    }

    if body.From == toUser.ID {
        return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è"})
    }

    friendship := models.Friendship{
        UserID:   body.From,
        FriendID: toUser.ID,
        Status:   "pending",
    }

    if err := initializers.DB.Create(&friendship).Error; err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", err)
        return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏"})
    }

    return c.JSON(fiber.Map{"message": "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
}

func AcceptFriendRequest(c *fiber.Ctx) error {
    type AcceptRequest struct {
		From     uuid.UUID `json:"from"`
		FriendID uuid.UUID `json:"friendId"`
	}
	

    var body AcceptRequest
    if err := c.BodyParser(&body); err != nil {
        return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"})
    }

    var friendship models.Friendship
    if err := initializers.DB.Where("user_id = ? AND friend_id = ? AND status = ?", body.FriendID, body.From, "pending").
        First(&friendship).Error; err != nil {
        return c.Status(404).JSON(fiber.Map{"error": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
    }

    friendship.Status = "accepted"
    if err := initializers.DB.Save(&friendship).Error; err != nil {
        return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"})
    }

    return c.JSON(fiber.Map{"message": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"})
}

func GetFriendsList(c *fiber.Ctx) error {
    userIDStr := c.Query("userId")
    userID, err := uuid.Parse(userIDStr)
    if err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID",
        })
    }

    var friends []models.User

    err = initializers.DB.
        Table("users").
        Joins("JOIN friendships f ON (f.friend_id = users.id OR f.user_id = users.id)").
        Where("f.status = ?", "accepted").
        Where("f.user_id = ? OR f.friend_id = ?", userID, userID).
        Where("users.id != ?", userID).
        Find(&friends).Error // üî• –≤–æ—Ç –∫–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ

    if err != nil {
        log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:", err)
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∑–µ–π",
        })
    }

    return c.JSON(friends)
}


func GetIncomingRequests(c *fiber.Ctx) error {
    userIDStr := c.Query("userId")

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ UUID
    userID, err := uuid.Parse(userIDStr)
    if err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userId (–æ–∂–∏–¥–∞–µ—Ç—Å—è UUID)",
        })
    }

    var requests []models.Friendship
    if err := initializers.DB.
        Where("friend_id = ? AND status = ?", userID, "pending").
        Preload("User").
        Find(&requests).Error; err != nil {
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏",
        })
    }

    return c.JSON(requests)
}

