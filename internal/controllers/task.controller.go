package controllers

import (
	"encoding/json"
    "gorm.io/datatypes"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
	"go_back/internal/initializers"
	"go_back/internal/models"
	"log"
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func GetTasks(c *fiber.Ctx) error {
	roomID := c.Query("roomId")
	var tasks []models.Task

	if err := initializers.DB.Preload("AssignedUsers.User").Where("room_id = ?", roomID).Find(&tasks).Error; err != nil {
		log.Printf("GetTasks: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %v", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"})
	}

	return c.JSON(tasks)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è admin/owner
func CreateTask(c *fiber.Ctx) error {
	log.Println("üö® [DEBUG] CreateTask –∑–∞–ø—É—â–µ–Ω")
	user := c.Locals("user").(*models.User)

	var task models.Task
	if err := c.BodyParser(&task); err != nil {
		log.Printf("‚ùå BodyParser error: %v", err)
		return c.Status(400).JSON(fiber.Map{"error": "Invalid input"})
	}

	log.Printf("üì• Task payload: RoomID=%s, ColumnID=%s, Text=%s", task.RoomID, task.ColumnID, task.Text)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
	var column models.Column
	if err := initializers.DB.First(&column, "id = ?", task.ColumnID).Error; err != nil {
		log.Printf("‚ùå Column not found: %v", err)
		return c.Status(400).JSON(fiber.Map{"error": "Column not found"})
	}

	log.Printf("‚úÖ Column –Ω–∞–π–¥–µ–Ω: ID=%s, –ø—Ä–∏–≤—è–∑–∞–Ω –∫ RoomID=%s", column.ID, column.RoomID)

	// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ room_id —É –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ
	if column.RoomID != task.RoomID {
		log.Printf("‚ùå Column-room mismatch: column.RoomID = %s, task.RoomID = %s", column.RoomID, task.RoomID)
		return c.Status(400).JSON(fiber.Map{"error": "Column does not belong to room"})
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var member models.RoomMember
	if err := initializers.DB.
		Where("room_id = ? AND user_id = ?", task.RoomID, user.ID).
		First(&member).Error; err != nil {
		log.Printf("‚ùå RoomMember not found: user.ID = %s, task.RoomID = %s", user.ID, task.RoomID)
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ"})
	}

	log.Printf("‚úÖ RoomMember –Ω–∞–π–¥–µ–Ω: —Ä–æ–ª—å = %s", member.Role)

	if member.Role != "admin" && member.Role != "owner" {
		log.Printf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –†–æ–ª—å: %s", member.Role)
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"})
	}

	// –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
	task.ID = uuid.New()
	if err := initializers.DB.Create(&task).Error; err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø—É—Å—Ç–æ, –Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
	initializers.DB.Preload("AssignedUsers.User").First(&task, "id = ?", task.ID)

	log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: %+v", task)
	return c.JSON(task)
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è owner/admin –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ
func DeleteTask(c *fiber.Ctx) error {
	taskId := c.Params("taskId")
	user := c.Locals("user").(*models.User)

	var task models.Task
	if err := initializers.DB.First(&task, "id = ?", taskId).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	// –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
	var assignment models.TaskAssignment
	initializers.DB.Where("task_id = ?", taskId).First(&assignment)

	// –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–æ–ª—å
	var member models.RoomMember
	initializers.DB.Where("room_id = ? AND user_id = ?", task.RoomID, user.ID).First(&member)

	// –£—Å–ª–æ–≤–∏—è: —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ –∞–¥–º–∏–Ω–æ–º/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –ª–∏–±–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É
	if member.Role != "admin" && member.Role != "owner" && assignment.UserID != user.ID {
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∏"})
	}

	if err := initializers.DB.Delete(&models.Task{}, "id = ?", taskId).Error; err != nil {
		log.Printf("DeleteTask: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
	}

	return c.JSON(fiber.Map{"message": "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞"})
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func GetTaskById(c *fiber.Ctx) error {
	taskId := c.Params("taskId")

	var task models.Task
	err := initializers.DB.
		Preload("AssignedUsers.User").
		First(&task, "id = ?", taskId).
		Error

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
		return c.Status(404).JSON(fiber.Map{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	return c.JSON(fiber.Map{
		"status": "success",
		"data":   task,
	})
}

func UpdateTask(c *fiber.Ctx) error {
	taskId := c.Params("taskId")

	var payload struct {
		Text        string                `json:"text"`
		Description string                `json:"description"`
		StartDate   *string               `json:"startDate"`
		EndDate     *string               `json:"endDate"`
		TaskLists   []models.TaskListData `json:"taskLists"`
	}

	if err := c.BodyParser(&payload); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",
		})
	}

	var task models.Task
	if err := initializers.DB.First(&task, "id = ?", taskId).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
	}

	jsonData, err := json.Marshal(payload.TaskLists)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–ª–∏—Å—Ç–æ–≤",
		})
	}

	task.Text = payload.Text
	task.Description = payload.Description
	task.StartDate = payload.StartDate
	task.EndDate = payload.EndDate
	task.TaskLists = datatypes.JSON(jsonData)

	if err := initializers.DB.Save(&task).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
		})
	}

	return c.JSON(fiber.Map{
		"status": "success",
		"task":   task,
	})
}

