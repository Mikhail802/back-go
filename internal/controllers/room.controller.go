package controllers

import (
    "go_back/internal/initializers"
    "go_back/internal/models"
    "log"
    "strconv"
    "strings"

    "github.com/gofiber/fiber/v2"
    "github.com/google/uuid"
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func GetRooms(c *fiber.Ctx) error {
	page := c.Query("page", "1")
	limit := c.Query("limit", "10")
	ownerId := c.Query("ownerId")
	userId := c.Query("userId")

	intPage, _ := strconv.Atoi(page)
	intLimit, _ := strconv.Atoi(limit)
	offset := (intPage - 1) * intLimit

	var rooms []models.Room

	if userId != "" {
		var roomIDs []uuid.UUID
		var ownedRooms, memberRooms []models.Room

		// –í–ª–∞–¥–µ–ª–µ—Ü
		if err := initializers.DB.Preload("Members").
			Where("owner_id = ?", userId).
			Find(&ownedRooms).Error; err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç"})
		}

		// –£—á–∞—Å—Ç–Ω–∏–∫
		if err := initializers.DB.Model(&models.RoomMember{}).
			Select("room_id").
			Where("user_id = ?", userId).
			Pluck("room_id", &roomIDs).Error; err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏–π"})
		}

		if len(roomIDs) > 0 {
			if err := initializers.DB.Preload("Members").
				Where("id IN ?", roomIDs).
				Find(&memberRooms).Error; err != nil {
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏–π"})
			}
		}

		roomMap := map[string]models.Room{}
		for _, r := range ownedRooms {
			roomMap[r.ID.String()] = r
		}
		for _, r := range memberRooms {
			roomMap[r.ID.String()] = r
		}
		for _, r := range roomMap {
			rooms = append(rooms, r)
		}
	} else if ownerId != "" {
		initializers.DB.Preload("Members").
			Where("owner_id = ?", ownerId).
			Limit(intLimit).
			Offset(offset).
			Find(&rooms)
	} else {
		initializers.DB.Preload("Members").
			Limit(intLimit).
			Offset(offset).
			Find(&rooms)
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status":  "success",
		"results": len(rooms),
		"rooms":   rooms,
	})
}


// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
func CreateRoom(c *fiber.Ctx) error {
    var payload *models.Room

    if err := c.BodyParser(&payload); err != nil {
        log.Printf("CreateRoom: BodyParser error: %v", err)
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "status":  "fail",
            "message": err.Error(),
        })
    }

    if payload.Name == "" || payload.Theme == "" || payload.OwnerID == uuid.Nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "status":  "fail",
            "message": "–ü–æ–ª—è name, theme –∏ owner_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        })
    }

    payload.ID = uuid.New()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    if err := initializers.DB.Create(&payload).Error; err != nil {
        if strings.Contains(err.Error(), "(SQLSTATE 23505)") {
            return c.Status(fiber.StatusConflict).JSON(fiber.Map{
                "status":  "fail",
                "message": "–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            })
        }
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "status":  "error",
            "message": err.Error(),
        })
    }

    // üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Ä–æ–ª—å—é owner
    member := models.RoomMember{
        ID:     uuid.New(),
        RoomID: payload.ID,
        UserID: payload.OwnerID,
        Role:   "owner",
    }

    if err := initializers.DB.Create(&member).Error; err != nil {
        log.Printf("CreateRoom: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞: %v", err)
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "status":  "error",
            "message": "–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        })
    }

    log.Printf("CreateRoom: Room –∏ —á–ª–µ–Ω—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    return c.Status(fiber.StatusCreated).JSON(fiber.Map{
        "status": "success",
        "data": fiber.Map{
            "room": payload,
        },
    })
}



// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
func DeleteRoom(c *fiber.Ctx) error {
	roomId := c.Params("roomId")

	result := initializers.DB.Delete(&models.Room{}, "id = ?", roomId)
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"status": "fail", "message": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	} else if result.Error != nil {
		return c.Status(fiber.StatusBadGateway).JSON(fiber.Map{"status": "error", "message": result.Error})
	}

	return c.SendStatus(fiber.StatusNoContent)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID
func GetRoomById(c *fiber.Ctx) error {
	roomId := c.Params("roomId")

	var room models.Room
	err := initializers.DB.
		Preload("Members.User").
		First(&room, "id = ?", roomId).Error

	if err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status":  "fail",
			"message": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
	}

	return c.JSON(fiber.Map{
		"status": "success",
		"data":   room,
	})
}


func InviteToRoom(c *fiber.Ctx) error {
	var payload struct {
		RoomID     uuid.UUID `json:"roomId"`
		ToUsername string    `json:"toUsername"`
		Role       string    `json:"role"` // "member" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	if err := c.BodyParser(&payload); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	if strings.TrimSpace(payload.ToUsername) == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
	}

	var toUser models.User
	if err := initializers.DB.First(&toUser, "username = ?", payload.ToUsername).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ?
	var existingMember models.RoomMember
	if err := initializers.DB.
		Where("room_id = ? AND user_id = ?", payload.RoomID, toUser.ID).
		First(&existingMember).Error; err == nil {
		return c.Status(fiber.StatusConflict).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ"})
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?
	var existingInvite models.RoomInvite
	if err := initializers.DB.
		Where("room_id = ? AND to_user_id = ? AND status = ?", payload.RoomID, toUser.ID, "pending").
		First(&existingInvite).Error; err == nil {
		return c.Status(fiber.StatusConflict).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω"})
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ middleware
	fromUserRaw := c.Locals("user")
	fromUser, ok := fromUserRaw.(*models.User)
	if !ok || fromUser == nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
	invite := models.RoomInvite{
		ID:         uuid.New(),
		RoomID:     payload.RoomID,
		FromUserID: fromUser.ID,
		ToUserID:   toUser.ID,
		Status:     "pending",
	}

	if err := initializers.DB.Create(&invite).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"})
	}

	return c.Status(fiber.StatusCreated).JSON(fiber.Map{"status": "ok"})
}



func GetRoomMembers(c *fiber.Ctx) error {
	roomId := c.Params("roomId")

	var members []models.RoomMember
	if err := initializers.DB.Where("room_id = ?", roomId).Find(&members).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"})
	}

	return c.JSON(fiber.Map{"members": members})
}

func AssignRoomRole(c *fiber.Ctx) error {
	var payload struct {
		RoomID uuid.UUID `json:"roomId"`
		UserID uuid.UUID `json:"userId"`
		Role   string    `json:"role"` // "admin" –∏–ª–∏ "member"
	}

	if err := c.BodyParser(&payload); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	if payload.Role != "admin" && payload.Role != "member" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å"})
	}

	result := initializers.DB.Model(&models.RoomMember{}).
		Where("room_id = ? AND user_id = ?", payload.RoomID, payload.UserID).
		Update("role", payload.Role)

	if result.Error != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏"})
	}
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	return c.JSON(fiber.Map{"status": "ok"})
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É

func UpdateTaskAssignment(c *fiber.Ctx) error {
	var payload struct {
		TaskID  uuid.UUID   `json:"taskId"`
		UserIDs []uuid.UUID `json:"userIds"` // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.BodyParser(&payload); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	var task models.Task
	if err := initializers.DB.First(&task, "id = ?", payload.TaskID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	// –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ task_assignments
	if len(payload.UserIDs) == 0 {
		if err := initializers.DB.Where("task_id = ?", payload.TaskID).Delete(&models.TaskAssignment{}).Error; err != nil {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		}
		return c.JSON(fiber.Map{"status": "all users removed"})
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
	if err := initializers.DB.Where("task_id = ? AND user_id NOT IN (?)", payload.TaskID, payload.UserIDs).Delete(&models.TaskAssignment{}).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
	for _, userID := range payload.UserIDs {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
		var existingAssignment models.TaskAssignment
		if err := initializers.DB.Where("task_id = ? AND user_id = ?", payload.TaskID, userID).First(&existingAssignment).Error; err != nil {
			assignment := models.TaskAssignment{
				ID:     uuid.New(),
				TaskID: payload.TaskID,
				UserID: userID,
			}
			if err := initializers.DB.Create(&assignment).Error; err != nil {
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
			}
		}
	}

	return c.JSON(fiber.Map{"status": "users updated successfully"})
}






func GetRoomInvites(c *fiber.Ctx) error {
	userId := c.Query("userId")
	if userId == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
	}

	var invites []models.RoomInvite
	if err := initializers.DB.Preload("Room").Preload("From").
		Where("to_user_id = ? AND status = ?", userId, "pending").
		Find(&invites).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"})
	}

	var response []fiber.Map
	for _, inv := range invites {
		response = append(response, fiber.Map{
			"id":         inv.ID,
			"roomName":   inv.Room.Name,
			"inviterName": inv.From.Name,
		})
	}

	return c.JSON(fiber.Map{"invites": response})
}


func AcceptRoomInvite(c *fiber.Ctx) error {
	var body struct {
		InviteID uuid.UUID `json:"inviteId"`
	}

	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"})
	}

	var invite models.RoomInvite
	if err := initializers.DB.First(&invite, "id = ?", body.InviteID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
	}

	invite.Status = "accepted"
	if err := initializers.DB.Save(&invite).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
	member := models.RoomMember{
		ID:     uuid.New(),
		RoomID: invite.RoomID,
		UserID: invite.ToUserID,
		Role:   "member",
	}
	initializers.DB.Create(&member)

	return c.JSON(fiber.Map{"status": "ok"})
}


func RejectRoomInvite(c *fiber.Ctx) error {
	var body struct {
		InviteID uuid.UUID `json:"inviteId"`
	}

	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"})
	}

	if err := initializers.DB.Model(&models.RoomInvite{}).
		Where("id = ?", body.InviteID).
		Update("status", "rejected").Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"})
	}

	return c.JSON(fiber.Map{"status": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"})
}

func RemoveUserFromRoom(c *fiber.Ctx) error {
	roomId := c.Params("roomId")
	userId := c.Params("userId")

	if roomId == "" || userId == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "roomId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
		})
	}

	result := initializers.DB.Where("room_id = ? AND user_id = ?", roomId, userId).Delete(&models.RoomMember{})
	if result.Error != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã",
		})
	}
	if result.RowsAffected == 0 {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ",
		})
	}

	return c.JSON(fiber.Map{"status": "—É–¥–∞–ª–µ–Ω–æ"})
}
